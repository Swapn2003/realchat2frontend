{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\frontend\\\\src\\\\context\\\\users\\\\userState.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport userContext from \"./userContext\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserState = props => {\n  _s();\n  // const [currentUser,setcurrentUser] = useState({\n  //     \"username\":\"User2\",\n  //     \"id\":'2'\n  // })\n  const [currentUser, setcurrentUser] = useState();\n  const updateCurrentUser = (newUser, newId) => {\n    setcurrentUser({\n      contactName: newUser,\n      username: newId\n    });\n  };\n\n  // const [Message,setMessage] = useState([])\n  // const updateMessage = (newMessage) => {\n  //     setMessage((prevMessage) => [\n  //       ...prevMessage,\n  //       {\n  //         text: newMessage,\n  //       },\n  //     ]);\n  //   };\n  const [myContacts, setmyContacts] = useLocalStorage('ic', []);\n  //   useEffect(() => {\n  //     myContacts.forEach((contact) => {\n  //       if (contact.id !== currentUser.id) return;\n  //       setMessage((prevMessage) => [...prevMessage, ...contact.message]);\n  //     });\n  //     // console.log(myContacts);\n  // }, [myContacts, currentUser.id]);\n\n  // const [myId,setmyId] = useLocalStorage('id');\n  // const updatemyId =(newId)=>{\n  //     setmyId(newId);\n  // }\n  const updatemyContacts = newContact => {\n    setmyContacts(prevContacts => [...prevContacts, {\n      name: newContact.name,\n      id: newContact.id,\n      message: []\n    }]);\n  };\n  // useEffect(console.log(`myContacts:: ${myContacts[0].message}`),myContacts)\n\n  //     const addMessageToContact = (newMessage) => {\n  //       console.log(newMessage);\n  //       setmyContacts(\n  //       myContacts.map((contact) => {\n  //         if (contact.id === newMessage.id[0]) {\n  //           return {\n  //             'name': contact.name,\n  //             'id': contact.id,\n  //             'message': [...(contact.message), newMessage.text],\n  //           };\n  //         }\n  //         return contact;\n  //       })\n  //       );\n  // };\n\n  // const addMessageToContact = (newMessage) => {\n  //   setmyContacts((prevContacts) =>\n  //     prevContacts.map((contact) => {\n  //       if (contact.id === newMessage.id[0]) {\n  //         return {\n  //           name: contact.name,\n  //           id: contact.id,\n  //           message: [...contact.message, newMessage.text],\n  //         };\n  //       }\n  //       return contact; // Return the contact as it is if the ID doesn't match\n  //     })\n  //   );\n  // };\n\n  const addMessageToContact = newMessage => {\n    const updatedContacts = myContacts.map(contact => {\n      if (contact.id === newMessage.id[0]) {\n        return {\n          name: contact.name,\n          id: contact.id,\n          message: [...contact.message, {\n            'text': newMessage.text,\n            'sender': newMessage.sender\n          }]\n        };\n      }\n      return contact;\n    });\n    console.log(\"Updated contacts:\", updatedContacts);\n    setmyContacts(updatedContacts);\n  };\n  return /*#__PURE__*/_jsxDEV(userContext.Provider, {\n    value: {\n      myContacts,\n      setmyContacts,\n      updatemyContacts,\n      currentUser,\n      updateCurrentUser,\n      addMessageToContact\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(UserState, \"XriCNiVcPpaME8trw6h0Mf1Sc7o=\", false, function () {\n  return [useLocalStorage];\n});\n_c = UserState;\nexport default UserState;\nvar _c;\n$RefreshReg$(_c, \"UserState\");","map":{"version":3,"names":["useEffect","useState","userContext","useLocalStorage","jsxDEV","_jsxDEV","UserState","props","_s","currentUser","setcurrentUser","updateCurrentUser","newUser","newId","contactName","username","myContacts","setmyContacts","updatemyContacts","newContact","prevContacts","name","id","message","addMessageToContact","newMessage","updatedContacts","map","contact","text","sender","console","log","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/frontend/src/context/users/userState.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport userContext from \"./userContext\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nconst UserState =(props)=>{\r\n    // const [currentUser,setcurrentUser] = useState({\r\n    //     \"username\":\"User2\",\r\n    //     \"id\":'2'\r\n    // })\r\n    const [currentUser,setcurrentUser] = useState();\r\n\r\n    const updateCurrentUser = (newUser, newId) => {\r\n        setcurrentUser({\r\n          contactName: newUser,\r\n          username: newId\r\n        });\r\n      };\r\n      \r\n    // const [Message,setMessage] = useState([])\r\n    // const updateMessage = (newMessage) => {\r\n    //     setMessage((prevMessage) => [\r\n    //       ...prevMessage,\r\n    //       {\r\n    //         text: newMessage,\r\n    //       },\r\n    //     ]);\r\n    //   };\r\n      const [myContacts,setmyContacts] =useLocalStorage('ic',[]);\r\n      //   useEffect(() => {\r\n      //     myContacts.forEach((contact) => {\r\n      //       if (contact.id !== currentUser.id) return;\r\n      //       setMessage((prevMessage) => [...prevMessage, ...contact.message]);\r\n      //     });\r\n      //     // console.log(myContacts);\r\n      // }, [myContacts, currentUser.id]);\r\n      \r\n      // const [myId,setmyId] = useLocalStorage('id');\r\n      // const updatemyId =(newId)=>{\r\n        //     setmyId(newId);\r\n        // }\r\n        const updatemyContacts = (newContact) => {\r\n          setmyContacts((prevContacts) => [\r\n            ...prevContacts,\r\n            {\r\n              name: newContact.name,\r\n              id: newContact.id,\r\n              message: [],\r\n            },\r\n          ]);\r\n        };\r\n        // useEffect(console.log(`myContacts:: ${myContacts[0].message}`),myContacts)\r\n        \r\n    //     const addMessageToContact = (newMessage) => {\r\n    //       console.log(newMessage);\r\n    //       setmyContacts(\r\n    //       myContacts.map((contact) => {\r\n    //         if (contact.id === newMessage.id[0]) {\r\n    //           return {\r\n    //             'name': contact.name,\r\n    //             'id': contact.id,\r\n    //             'message': [...(contact.message), newMessage.text],\r\n    //           };\r\n    //         }\r\n    //         return contact;\r\n    //       })\r\n    //       );\r\n    // };\r\n\r\n    // const addMessageToContact = (newMessage) => {\r\n    //   setmyContacts((prevContacts) =>\r\n    //     prevContacts.map((contact) => {\r\n    //       if (contact.id === newMessage.id[0]) {\r\n    //         return {\r\n    //           name: contact.name,\r\n    //           id: contact.id,\r\n    //           message: [...contact.message, newMessage.text],\r\n    //         };\r\n    //       }\r\n    //       return contact; // Return the contact as it is if the ID doesn't match\r\n    //     })\r\n    //   );\r\n    // };\r\n    \r\n    const addMessageToContact = (newMessage) => {\r\n      const updatedContacts = myContacts.map((contact) => {\r\n        if (contact.id === newMessage.id[0]) {\r\n          return {\r\n            name: contact.name,\r\n            id: contact.id,\r\n            message: [...contact.message, {'text':newMessage.text,'sender':newMessage.sender}],\r\n          };\r\n        }\r\n        return contact;\r\n      });\r\n      console.log(\"Updated contacts:\", updatedContacts);\r\n      setmyContacts(updatedContacts);\r\n    };\r\n    return(\r\n        <userContext.Provider value={{myContacts,setmyContacts,updatemyContacts,currentUser,updateCurrentUser,addMessageToContact}}>\r\n            {props.children}\r\n        </userContext.Provider>\r\n    )\r\n}\r\nexport default UserState ;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,SAAS,GAAGC,KAAK,IAAG;EAAAC,EAAA;EACtB;EACA;EACA;EACA;EACA,MAAM,CAACC,WAAW,EAACC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAE/C,MAAMU,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IAC1CH,cAAc,CAAC;MACbI,WAAW,EAAEF,OAAO;MACpBG,QAAQ,EAAEF;IACZ,CAAC,CAAC;EACJ,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,MAAM,CAACG,UAAU,EAACC,aAAa,CAAC,GAAEd,eAAe,CAAC,IAAI,EAAC,EAAE,CAAC;EAC1D;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACE;EACA;EACA,MAAMe,gBAAgB,GAAIC,UAAU,IAAK;IACvCF,aAAa,CAAEG,YAAY,IAAK,CAC9B,GAAGA,YAAY,EACf;MACEC,IAAI,EAAEF,UAAU,CAACE,IAAI;MACrBC,EAAE,EAAEH,UAAU,CAACG,EAAE;MACjBC,OAAO,EAAE;IACX,CAAC,CACF,CAAC;EACJ,CAAC;EACD;;EAEJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,mBAAmB,GAAIC,UAAU,IAAK;IAC1C,MAAMC,eAAe,GAAGV,UAAU,CAACW,GAAG,CAAEC,OAAO,IAAK;MAClD,IAAIA,OAAO,CAACN,EAAE,KAAKG,UAAU,CAACH,EAAE,CAAC,CAAC,CAAC,EAAE;QACnC,OAAO;UACLD,IAAI,EAAEO,OAAO,CAACP,IAAI;UAClBC,EAAE,EAAEM,OAAO,CAACN,EAAE;UACdC,OAAO,EAAE,CAAC,GAAGK,OAAO,CAACL,OAAO,EAAE;YAAC,MAAM,EAACE,UAAU,CAACI,IAAI;YAAC,QAAQ,EAACJ,UAAU,CAACK;UAAM,CAAC;QACnF,CAAC;MACH;MACA,OAAOF,OAAO;IAChB,CAAC,CAAC;IACFG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,eAAe,CAAC;IACjDT,aAAa,CAACS,eAAe,CAAC;EAChC,CAAC;EACD,oBACIrB,OAAA,CAACH,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAClB,UAAU;MAACC,aAAa;MAACC,gBAAgB;MAACT,WAAW;MAACE,iBAAiB;MAACa;IAAmB,CAAE;IAAAW,QAAA,EACtH5B,KAAK,CAAC4B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;AAAA/B,EAAA,CAlGKF,SAAS;EAAA,QAuByBH,eAAe;AAAA;AAAAqC,EAAA,GAvBjDlC,SAAS;AAmGf,eAAeA,SAAS;AAAE,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}