{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\frontend\\\\src\\\\Components\\\\Chatpane.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Chatbox from './Chatbox';\nimport Message from './Message';\nimport userIcon from '../img/user.png';\nimport moreIcon from '../img/More-icon.png';\n// import { useState } from 'react';\nimport { useContext, useEffect } from 'react';\nimport userContext from '../context/users/userContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatpane = props => {\n  _s();\n  const User = useContext(userContext);\n  // // console.log(User.myContacts) ;\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n  // contact.message.map((message, index) => (\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\n  //     </div>\n  //   ))\n  // );\n\n  // const [chatpane,setchatpane] =useState();\n\n  // Perform any necessary actions when User.currentUser changes\n  // For example, fetch new chat messages\n  if (!User.currentUser) {\n    return null;\n  }\n  // const chatpane=null;\n  // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n  // {console.log(contact.message);\n\n  // });\n\n  const chatpane = User.myContacts.filter(contact => contact.id === User.currentUser.username).map(contact => {\n    if (contact.message) {\n      if (contact.message.length !== 0) {\n        console.log(\"contact.message:: \", contact.message);\n        contact.message.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.sender === props.myId ? \"outgoing-chats\" : \"mychats\",\n          children: /*#__PURE__*/_jsxDEV(Message, {\n            name: message.sender === props.myId ? \"You\" : message.sender,\n            text: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 11\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this));\n      }\n    }\n  });\n  if (!User.myContacts || !User.currentUser) {\n    return null; // Or return a loading indicator\n  }\n\n  // const chatpane = User.myContacts\n  //   .filter((contact) => contact.id === User.currentUser.id)\n  //   .map((contact) =>\n  //     contact.messages.map((message, index) => (\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\n  //       </div>\n  //     ))\n  //   );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-pane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"userIcon\",\n        src: userIcon,\n        alt: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Group-name\",\n        children: User.currentUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"moreIcon\",\n        src: moreIcon,\n        alt: \"More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: User.myContacts !== undefined && User.currentUser !== undefined ? chatpane : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-bar\",\n      children: /*#__PURE__*/_jsxDEV(Chatbox, {\n        myId: props.myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n_s(Chatpane, \"68pAIBoCybEghYpKDyNa7NSmRmA=\");\n_c = Chatpane;\nexport default Chatpane;\nvar _c;\n$RefreshReg$(_c, \"Chatpane\");","map":{"version":3,"names":["React","useState","Chatbox","Message","userIcon","moreIcon","useContext","useEffect","userContext","jsxDEV","_jsxDEV","Chatpane","props","_s","User","currentUser","chatpane","myContacts","filter","contact","id","username","map","message","length","console","log","index","className","sender","myId","children","name","text","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","undefined","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/frontend/src/Components/Chatpane.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Chatbox from './Chatbox'\r\nimport Message from './Message'\r\nimport userIcon from '../img/user.png';\r\nimport moreIcon from '../img/More-icon.png'\r\n// import { useState } from 'react';\r\nimport { useContext ,useEffect} from 'react';\r\nimport userContext from '../context/users/userContext';\r\nconst Chatpane = (props) => {\r\n  const User =  useContext(userContext);\r\n  // // console.log(User.myContacts) ;\r\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n  // contact.message.map((message, index) => (\r\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\r\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\r\n  //     </div>\r\n  //   ))\r\n  // );\r\n\r\n  // const [chatpane,setchatpane] =useState();\r\n\r\n    // Perform any necessary actions when User.currentUser changes\r\n    // For example, fetch new chat messages\r\n      if(!User.currentUser){\r\n        return null;\r\n      }\r\n      // const chatpane=null;\r\n      // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n      // {console.log(contact.message);\r\n        \r\n        \r\n      // });\r\n\r\n      const chatpane=User.myContacts.filter((contact) => contact.id === User.currentUser.username).map((contact) =>\r\n      { if(contact.message){if(contact.message.length!==0){\r\n      console.log(\"contact.message:: \",contact.message);\r\n        contact.message.map((message, index) => (\r\n        <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n          <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n        </div>\r\n      ))}}\r\n    }\r\n    );\r\n  \r\n\r\n\r\n  if (!User.myContacts || !User.currentUser) {\r\n    return null; // Or return a loading indicator\r\n  }\r\n  \r\n  \r\n\r\n  // const chatpane = User.myContacts\r\n  //   .filter((contact) => contact.id === User.currentUser.id)\r\n  //   .map((contact) =>\r\n  //     contact.messages.map((message, index) => (\r\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n  //       </div>\r\n  //     ))\r\n  //   );\r\n        \r\n  return (\r\n\r\n      <div className=\"chat-pane\">\r\n        <div className=\"chat-topbar\">\r\n          <img className=\"userIcon\"src={userIcon} alt=\"User\" />\r\n          <span className=\"Group-name\">{User.currentUser.username}</span>\r\n          <img className=\"moreIcon\"src={moreIcon} alt=\"More\" />\r\n        </div>\r\n        <div className=\"chats\">\r\n          {/* <Message name=\"User\"text=\"lorem njkdj kc kcejdwskdk j n kcxjnekjbjxj edj dbn xjd jdnb dn ndjnj djn kdx kjks jnsk hjsk jnsk js kshj nksnn.\"/> */}\r\n          <div >\r\n\r\n            \r\n              {/* {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null} */}\r\n              {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null}\r\n{\r\n\r\n              // User.Message.map((message,index)=>\r\n              // {\r\n              //   return(\r\n              //    <div className=\"mychat\" key={index}>\r\n              //     {/* {console.log(message.text)} */}\r\n              //      <Message name ={props.myId} text={message.text} />\r\n              //    </div> );\r\n              // }\r\n              // )\r\n}\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar\">\r\n          <Chatbox myId={props.myId} />\r\n        </div>\r\n      </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default Chatpane\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}