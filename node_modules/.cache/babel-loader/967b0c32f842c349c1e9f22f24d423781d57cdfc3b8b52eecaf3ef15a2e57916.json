{"ast":null,"code":"import React,{useState}from'react';import Chatbox from'./Chatbox';import Message from'./Message';import userIcon from'../img/user.png';import moreIcon from'../img/More-icon.png';// import { useState } from 'react';\nimport{useContext,useEffect}from'react';import userContext from'../context/users/userContext';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chatpane=function Chatpane(props){var User=useContext(userContext);// // console.log(User.myContacts) ;\n// const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n// contact.message.map((message, index) => (\n//   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\n//       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\n//     </div>\n//   ))\n// );\n// const [chatpane,setchatpane] =useState();\n// Perform any necessary actions when User.currentUser changes\n// For example, fetch new chat messages\n// if(!User.currentUser){\n//   return null;\n// }\n// const chatpane=null;\n// User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n// {console.log(contact.message);\n// });\nvar handleOnClick=function handleOnClick(){};if(!User.myContacts||!User.currentUser){return null;// Or return a loading indicator\n}var chatpane=User.myContacts.filter(function(contact){return contact.contactName===User.currentUser.contactName;}).map(function(contact){if(contact.messages!==undefined){if(contact.messages.length!==0){// console.log(\"contact.message:: \",contact.messages);\nreturn contact.messages.map(function(message,index){return/*#__PURE__*/_jsx(\"div\",{className:message.sender===props.myId?\"outgoing-chats\":\"mychats\",children:/*#__PURE__*/_jsx(Message,{name:message.sender===props.myId?\"You\":User.currentUser.contactName,text:message.content})},index);});}}});// const chatpane = User.myContacts\n//   .filter((contact) => contact.id === User.currentUser.id)\n//   .map((contact) =>\n//     contact.messages.map((message, index) => (\n//       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\n//         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\n//       </div>\n//     ))\n//   );\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chat-pane\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-topbar\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"userIcon\",src:userIcon,alt:\"User\"}),/*#__PURE__*/_jsx(\"span\",{className:\"Group-name\",children:User.currentUser.contactName}),/*#__PURE__*/_jsxs(\"div\",{className:\"topbar-buttons\",onClick:handleOnClick,children:[/*#__PURE__*/_jsx(\"button\",{className:\"addmember\",children:\"Add Member\"}),/*#__PURE__*/_jsx(\"img\",{className:\"moreIcon\",src:moreIcon,alt:\"More\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chats\",children:/*#__PURE__*/_jsx(\"div\",{children:User.myContacts!==undefined&&User.currentUser!==undefined?chatpane:null})}),/*#__PURE__*/_jsx(\"div\",{className:\"bottom-bar\",children:/*#__PURE__*/_jsx(Chatbox,{myId:props.myId})})]});};export default Chatpane;","map":{"version":3,"names":["React","useState","Chatbox","Message","userIcon","moreIcon","useContext","useEffect","userContext","jsx","_jsx","jsxs","_jsxs","Chatpane","props","User","handleOnClick","myContacts","currentUser","chatpane","filter","contact","contactName","map","messages","undefined","length","message","index","className","sender","myId","children","name","text","content","src","alt","onClick"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Project6_Depoloyment_try_real_chat26.06.2023/New folder/frontend/src/Components/Chatpane.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Chatbox from './Chatbox'\r\nimport Message from './Message'\r\nimport userIcon from '../img/user.png';\r\nimport moreIcon from '../img/More-icon.png'\r\n// import { useState } from 'react';\r\nimport { useContext ,useEffect} from 'react';\r\nimport userContext from '../context/users/userContext';\r\nconst Chatpane = (props) => {\r\n  const User =  useContext(userContext);\r\n  // // console.log(User.myContacts) ;\r\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n  // contact.message.map((message, index) => (\r\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\r\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\r\n  //     </div>\r\n  //   ))\r\n  // );\r\n\r\n  // const [chatpane,setchatpane] =useState();\r\n\r\n    // Perform any necessary actions when User.currentUser changes\r\n    // For example, fetch new chat messages\r\n      // if(!User.currentUser){\r\n      //   return null;\r\n      // }\r\n      // const chatpane=null;\r\n      // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n      // {console.log(contact.message);\r\n        \r\n        \r\n      // });\r\n\r\n      const handleOnClick=()=>{\r\n        \r\n      }\r\n\r\n\r\n      if (!User.myContacts || !User.currentUser) {\r\n        return null; // Or return a loading indicator\r\n      }\r\n      const chatpane=User.myContacts.filter((contact) => contact.contactName === User.currentUser.contactName).map((contact) =>\r\n      { if(contact.messages!==undefined){if(contact.messages.length!==0){\r\n      // console.log(\"contact.message:: \",contact.messages);\r\n        return contact.messages.map((message, index) => (\r\n        <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n          <Message name={message.sender === props.myId ? \"You\" : User.currentUser.contactName} text={message.content} />\r\n        </div>\r\n      ))}}\r\n    }\r\n    );\r\n  \r\n\r\n\r\n  \r\n  \r\n\r\n  // const chatpane = User.myContacts\r\n  //   .filter((contact) => contact.id === User.currentUser.id)\r\n  //   .map((contact) =>\r\n  //     contact.messages.map((message, index) => (\r\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n  //       </div>\r\n  //     ))\r\n  //   );\r\n        \r\n  return (\r\n\r\n      <div className=\"chat-pane\">\r\n        <div className=\"chat-topbar\">\r\n          <img className=\"userIcon\"src={userIcon} alt=\"User\" />\r\n          <span className=\"Group-name\">{User.currentUser.contactName}</span>\r\n          <div className=\"topbar-buttons\" onClick={handleOnClick}>\r\n            <button className='addmember'>Add Member</button>\r\n            <img className=\"moreIcon\"src={moreIcon} alt=\"More\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"chats\">\r\n          {/* <Message name=\"User\"text=\"lorem njkdj kc kcejdwskdk j n kcxjnekjbjxj edj dbn xjd jdnb dn ndjnj djn kdx kjks jnsk hjsk jnsk js kshj nksnn.\"/> */}\r\n          <div >\r\n\r\n            \r\n              {/* {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null} */}\r\n              {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null}\r\n{\r\n\r\n              // User.Message.map((message,index)=>\r\n              // {\r\n              //   return(\r\n              //    <div className=\"mychat\" key={index}>\r\n              //     {/* {console.log(message.text)} */}\r\n              //      <Message name ={props.myId} text={message.text} />\r\n              //    </div> );\r\n              // }\r\n              // )\r\n}\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar\">\r\n          <Chatbox myId={props.myId} />\r\n        </div>\r\n      </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default Chatpane\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}