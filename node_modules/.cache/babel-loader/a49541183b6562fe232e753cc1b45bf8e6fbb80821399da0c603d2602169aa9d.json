{"ast":null,"code":"import _toConsumableArray from\"D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Project6_Depoloyment_try_real_chat26.06.2023/New folder/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Project6_Depoloyment_try_real_chat26.06.2023/New folder/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from\"react\";import userContext from\"./userContext\";import useLocalStorage from\"../../hooks/useLocalStorage\";import{jsx as _jsx}from\"react/jsx-runtime\";var UserState=function UserState(props){// const [currentUser,setcurrentUser] = useState({\n//     \"username\":\"User2\",\n//     \"id\":'2'\n// })\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),currentUser=_useState2[0],setcurrentUser=_useState2[1];var updateCurrentUser=function updateCurrentUser(contactName,recipients,isGroupChat){setcurrentUser({\"contactName\":contactName,\"recipients\":recipients,\"isGroupChat\":isGroupChat});};// const [Message,setMessage] = useState([])\n// const updateMessage = (newMessage) => {\n//     setMessage((prevMessage) => [\n//       ...prevMessage,\n//       {\n//         text: newMessage,\n//       },\n//     ]);\n//   };\nvar _useLocalStorage=useLocalStorage('ic'),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),myContacts=_useLocalStorage2[0],setmyContacts=_useLocalStorage2[1];//   useEffect(() => {\n//     myContacts.forEach((contact) => {\n//       if (contact.id !== currentUser.id) return;\n//       setMessage((prevMessage) => [...prevMessage, ...contact.message]);\n//     });\n//     // console.log(myContacts);\n// }, [myContacts, currentUser.id]);\n// const [myId,setmyId] = useLocalStorage('id');\n// const updatemyId =(newId)=>{\n//     setmyId(newId);\n// }\nvar updatemyContacts=function updatemyContacts(newContact){setmyContacts(newContact);};// const updatemyContacts = (newContact) => {\n//   setmyContacts((prevContacts) => [\n//     ...prevContacts,\n//     {\n//       contactName: newContact.contactName,\n//       username: newContact.username,\n//       message: [],\n//     },\n//   ]);\n// };\n// useEffect(console.log(`myContacts:: ${myContacts[0].message}`),myContacts)\n//     const addMessageToContact = (newMessage) => {\n//       console.log(newMessage);\n//       setmyContacts(\n//       myContacts.map((contact) => {\n//         if (contact.id === newMessage.id[0]) {\n//           return {\n//             'name': contact.name,\n//             'id': contact.id,\n//             'message': [...(contact.message), newMessage.text],\n//           };\n//         }\n//         return contact;\n//       })\n//       );\n// };\n// const addMessageToContact = (newMessage) => {\n//   setmyContacts((prevContacts) =>\n//     prevContacts.map((contact) => {\n//       if (contact.id === newMessage.id[0]) {\n//         return {\n//           name: contact.name,\n//           id: contact.id,\n//           message: [...contact.message, newMessage.text],\n//         };\n//       }\n//       return contact; // Return the contact as it is if the ID doesn't match\n//     })\n//   );\n// };\nvar addMessageToContact=function addMessageToContact(newMessage){var updatedContacts=myContacts.map(function(contact){if(contact.id===newMessage.id[0]){return{name:contact.name,id:contact.id,message:[].concat(_toConsumableArray(contact.message),[{'text':newMessage.text,'sender':newMessage.sender}])};}return contact;});console.log(\"Updated contacts:\",updatedContacts);setmyContacts(updatedContacts);};return/*#__PURE__*/_jsx(userContext.Provider,{value:{myContacts:myContacts,updatemyContacts:updatemyContacts,currentUser:currentUser,updateCurrentUser:updateCurrentUser,addMessageToContact:addMessageToContact},children:props.children});};export default UserState;","map":{"version":3,"names":["useEffect","useState","userContext","useLocalStorage","jsx","_jsx","UserState","props","_useState","_useState2","_slicedToArray","currentUser","setcurrentUser","updateCurrentUser","contactName","recipients","isGroupChat","_useLocalStorage","_useLocalStorage2","myContacts","setmyContacts","updatemyContacts","newContact","addMessageToContact","newMessage","updatedContacts","map","contact","id","name","message","concat","_toConsumableArray","text","sender","console","log","Provider","value","children"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Project6_Depoloyment_try_real_chat26.06.2023/New folder/frontend/src/context/users/userState.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport userContext from \"./userContext\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nconst UserState =(props)=>{\r\n    // const [currentUser,setcurrentUser] = useState({\r\n    //     \"username\":\"User2\",\r\n    //     \"id\":'2'\r\n    // })\r\n    const [currentUser,setcurrentUser] = useState();\r\n\r\n    const updateCurrentUser = (contactName,recipients,isGroupChat) => {\r\n        setcurrentUser({\r\n          \"contactName\":contactName,\r\n          \"recipients\":recipients,\r\n          \"isGroupChat\":isGroupChat\r\n        });\r\n      };\r\n      \r\n    // const [Message,setMessage] = useState([])\r\n    // const updateMessage = (newMessage) => {\r\n    //     setMessage((prevMessage) => [\r\n    //       ...prevMessage,\r\n    //       {\r\n    //         text: newMessage,\r\n    //       },\r\n    //     ]);\r\n    //   };\r\n      const [myContacts,setmyContacts] =useLocalStorage('ic');\r\n      //   useEffect(() => {\r\n      //     myContacts.forEach((contact) => {\r\n      //       if (contact.id !== currentUser.id) return;\r\n      //       setMessage((prevMessage) => [...prevMessage, ...contact.message]);\r\n      //     });\r\n      //     // console.log(myContacts);\r\n      // }, [myContacts, currentUser.id]);\r\n      \r\n      // const [myId,setmyId] = useLocalStorage('id');\r\n      // const updatemyId =(newId)=>{\r\n        //     setmyId(newId);\r\n        // }\r\n        const updatemyContacts = (newContact) => {\r\n          setmyContacts(newContact);\r\n        };\r\n        // const updatemyContacts = (newContact) => {\r\n        //   setmyContacts((prevContacts) => [\r\n        //     ...prevContacts,\r\n        //     {\r\n        //       contactName: newContact.contactName,\r\n        //       username: newContact.username,\r\n        //       message: [],\r\n        //     },\r\n        //   ]);\r\n        // };\r\n        // useEffect(console.log(`myContacts:: ${myContacts[0].message}`),myContacts)\r\n        \r\n    //     const addMessageToContact = (newMessage) => {\r\n    //       console.log(newMessage);\r\n    //       setmyContacts(\r\n    //       myContacts.map((contact) => {\r\n    //         if (contact.id === newMessage.id[0]) {\r\n    //           return {\r\n    //             'name': contact.name,\r\n    //             'id': contact.id,\r\n    //             'message': [...(contact.message), newMessage.text],\r\n    //           };\r\n    //         }\r\n    //         return contact;\r\n    //       })\r\n    //       );\r\n    // };\r\n\r\n    // const addMessageToContact = (newMessage) => {\r\n    //   setmyContacts((prevContacts) =>\r\n    //     prevContacts.map((contact) => {\r\n    //       if (contact.id === newMessage.id[0]) {\r\n    //         return {\r\n    //           name: contact.name,\r\n    //           id: contact.id,\r\n    //           message: [...contact.message, newMessage.text],\r\n    //         };\r\n    //       }\r\n    //       return contact; // Return the contact as it is if the ID doesn't match\r\n    //     })\r\n    //   );\r\n    // };\r\n    \r\n    const addMessageToContact = (newMessage) => {\r\n      const updatedContacts = myContacts.map((contact) => {\r\n        if (contact.id === newMessage.id[0]) {\r\n          return {\r\n            name: contact.name,\r\n            id: contact.id,\r\n            message: [...contact.message, {'text':newMessage.text,'sender':newMessage.sender}],\r\n          };\r\n        }\r\n        return contact;\r\n      });\r\n      console.log(\"Updated contacts:\", updatedContacts);\r\n      setmyContacts(updatedContacts);\r\n    };\r\n    return(\r\n        <userContext.Provider value={{myContacts,updatemyContacts,currentUser,updateCurrentUser,addMessageToContact}}>\r\n            {props.children}\r\n        </userContext.Provider>\r\n    )\r\n}\r\nexport default UserState ;"],"mappings":"oZAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,eAAe,KAAM,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1D,GAAM,CAAAC,SAAS,CAAE,QAAX,CAAAA,SAASA,CAAGC,KAAK,CAAG,CACtB;AACA;AACA;AACA;AACA,IAAAC,SAAA,CAAqCP,QAAQ,CAAC,CAAC,CAAAQ,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAxCG,WAAW,CAAAF,UAAA,IAACG,cAAc,CAAAH,UAAA,IAEjC,GAAM,CAAAI,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAIC,WAAW,CAACC,UAAU,CAACC,WAAW,CAAK,CAC9DJ,cAAc,CAAC,CACb,aAAa,CAACE,WAAW,CACzB,YAAY,CAACC,UAAU,CACvB,aAAa,CAACC,WAChB,CAAC,CAAC,CACJ,CAAC,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,IAAAC,gBAAA,CAAkCd,eAAe,CAAC,IAAI,CAAC,CAAAe,iBAAA,CAAAR,cAAA,CAAAO,gBAAA,IAAhDE,UAAU,CAAAD,iBAAA,IAACE,aAAa,CAAAF,iBAAA,IAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACE;AACA;AACA,GAAM,CAAAG,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,UAAU,CAAK,CACvCF,aAAa,CAACE,UAAU,CAAC,CAC3B,CAAC,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAM,CAAAC,mBAAmB,CAAG,QAAtB,CAAAA,mBAAmBA,CAAIC,UAAU,CAAK,CAC1C,GAAM,CAAAC,eAAe,CAAGN,UAAU,CAACO,GAAG,CAAC,SAACC,OAAO,CAAK,CAClD,GAAIA,OAAO,CAACC,EAAE,GAAKJ,UAAU,CAACI,EAAE,CAAC,CAAC,CAAC,CAAE,CACnC,MAAO,CACLC,IAAI,CAAEF,OAAO,CAACE,IAAI,CAClBD,EAAE,CAAED,OAAO,CAACC,EAAE,CACdE,OAAO,IAAAC,MAAA,CAAAC,kBAAA,CAAML,OAAO,CAACG,OAAO,GAAE,CAAC,MAAM,CAACN,UAAU,CAACS,IAAI,CAAC,QAAQ,CAACT,UAAU,CAACU,MAAM,CAAC,EACnF,CAAC,CACH,CACA,MAAO,CAAAP,OAAO,CAChB,CAAC,CAAC,CACFQ,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEX,eAAe,CAAC,CACjDL,aAAa,CAACK,eAAe,CAAC,CAChC,CAAC,CACD,mBACIpB,IAAA,CAACH,WAAW,CAACmC,QAAQ,EAACC,KAAK,CAAE,CAACnB,UAAU,CAAVA,UAAU,CAACE,gBAAgB,CAAhBA,gBAAgB,CAACV,WAAW,CAAXA,WAAW,CAACE,iBAAiB,CAAjBA,iBAAiB,CAACU,mBAAmB,CAAnBA,mBAAmB,CAAE,CAAAgB,QAAA,CACxGhC,KAAK,CAACgC,QAAQ,CACG,CAAC,CAE/B,CAAC,CACD,cAAe,CAAAjC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}