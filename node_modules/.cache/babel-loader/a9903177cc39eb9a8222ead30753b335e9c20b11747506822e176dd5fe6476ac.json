{"ast":null,"code":"import _regeneratorRuntime from\"D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/render_netlify_deployment_realChat/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/render_netlify_deployment_realChat/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React,{useState}from'react';import Chatbox from'./Chatbox';import Message from'./Message';import userIcon from'../img/user.png';import moreIcon from'../img/More-icon.png';// import { useState } from 'react';\nimport{useContext,useEffect}from'react';import userContext from'../context/users/userContext';import axios from'axios';import addMember from\"../img/addMember.png\";import Image from'./Image';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chatpane=function Chatpane(props){var User=useContext(userContext);// // console.log(User.myContacts) ;\n// const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n// contact.message.map((message, index) => (\n//   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\n//       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\n//     </div>\n//   ))\n// );\n// const [chatpane,setchatpane] =useState();\n// Perform any necessary actions when User.currentUser changes\n// For example, fetch new chat messages\n// if(!User.currentUser){\n//   return null;\n// }\n// const chatpane=null;\n// User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n// {console.log(contact.message);\n// });\nvar handleOnClick=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var newMemberUsername,config;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:newMemberUsername=window.prompt('New Member username?');try{config={headers:{\"Content-type\":\"application/json\"}};axios.put(\"https://realchatbackend-l5am.onrender.com/api/user/contacts/addMember\",{myId:props.myId,recipient:newMemberUsername,contactName:User.currentUser.contactName},config);}catch(error){console.log(error.message);}case 2:case\"end\":return _context.stop();}},_callee);}));return function handleOnClick(){return _ref.apply(this,arguments);};}();if(!User.myContacts||!User.currentUser){return null;// Or return a loading indicator\n}var chatpane=User.myContacts.filter(function(contact){return contact.contactName===User.currentUser.contactName;}).map(function(contact){if(contact.messages!==undefined){if(contact.messages.length!==0){// console.log(\"contact.message:: \",contact.messages);\nreturn contact.messages.map(function(message,index){return message.type===\"file\"?/*#__PURE__*/_jsx(\"div\",{className:message.sender===props.myId?\"outgoing-chats\":\"mychats\",children:/*#__PURE__*/_jsx(Image,{src:message.locn})},index):/*#__PURE__*/_jsx(\"div\",{className:message.sender===props.myId?\"outgoing-chats\":\"mychats\",children:/*#__PURE__*/_jsx(Message,{name:message.sender===props.myId?\"You\":message.sender,text:message.content})},index);});}}});// const chatpane = User.myContacts\n//   .filter((contact) => contact.id === User.currentUser.id)\n//   .map((contact) =>\n//     contact.messages.map((message, index) => (\n//       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\n//         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\n//       </div>\n//     ))\n//   );\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chat-pane\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-topbar\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"userIcon\",src:userIcon,alt:\"User\"}),/*#__PURE__*/_jsx(\"span\",{className:\"Group-name\",children:User.currentUser.contactName}),/*#__PURE__*/_jsxs(\"div\",{className:\"topbar-buttons\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"addmember\",onClick:handleOnClick,style:User.currentUser.isGroupChat?{}:{display:'none'},children:/*#__PURE__*/_jsx(\"img\",{src:addMember,alt:\"AddMember\"})}),/*#__PURE__*/_jsx(\"img\",{className:\"moreIcon\",src:moreIcon,alt:\"More\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chats\",children:/*#__PURE__*/_jsx(\"div\",{children:User.myContacts!==undefined&&User.currentUser!==undefined?chatpane:null})}),/*#__PURE__*/_jsx(\"div\",{className:\"bottom-bar\",children:/*#__PURE__*/_jsx(Chatbox,{myId:props.myId})})]});};export default Chatpane;","map":{"version":3,"names":["React","useState","Chatbox","Message","userIcon","moreIcon","useContext","useEffect","userContext","axios","addMember","Image","jsx","_jsx","jsxs","_jsxs","Chatpane","props","User","handleOnClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newMemberUsername","config","wrap","_callee$","_context","prev","next","window","prompt","headers","put","myId","recipient","contactName","currentUser","error","console","log","message","stop","apply","arguments","myContacts","chatpane","filter","contact","map","messages","undefined","length","index","type","className","sender","children","src","locn","name","text","content","alt","onClick","style","isGroupChat","display"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/render_netlify_deployment_realChat/frontend/src/Components/Chatpane.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Chatbox from './Chatbox'\r\nimport Message from './Message'\r\nimport userIcon from '../img/user.png';\r\nimport moreIcon from '../img/More-icon.png'\r\n// import { useState } from 'react';\r\nimport { useContext ,useEffect} from 'react';\r\nimport userContext from '../context/users/userContext';\r\nimport axios from 'axios';\r\nimport addMember from \"../img/addMember.png\";\r\nimport Image from './Image';\r\n\r\nconst Chatpane = (props) => {\r\n  const User =  useContext(userContext);\r\n  // // console.log(User.myContacts) ;\r\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n  // contact.message.map((message, index) => (\r\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\r\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\r\n  //     </div>\r\n  //   ))\r\n  // );\r\n\r\n  // const [chatpane,setchatpane] =useState();\r\n\r\n    // Perform any necessary actions when User.currentUser changes\r\n    // For example, fetch new chat messages\r\n      // if(!User.currentUser){\r\n      //   return null;\r\n      // }\r\n      // const chatpane=null;\r\n      // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n      // {console.log(contact.message);\r\n        \r\n        \r\n      // });\r\n\r\n      const handleOnClick=async()=>{\r\n       const newMemberUsername = window.prompt('New Member username?');\r\n\r\n       try{\r\n        const config ={\r\n          headers: {\r\n            \"Content-type\":\"application/json\",\r\n          }\r\n        };\r\n        axios.put(`https://realchatbackend-l5am.onrender.com/api/user/contacts/addMember`,{myId:props.myId,recipient:newMemberUsername,contactName:User.currentUser.contactName},config)\r\n      }catch(error){\r\n        console.log(error.message);\r\n      }\r\n      }\r\n\r\n\r\n      if (!User.myContacts || !User.currentUser) {\r\n        return null; // Or return a loading indicator\r\n      }\r\n      const chatpane=User.myContacts.filter((contact) => contact.contactName === User.currentUser.contactName).map((contact) =>\r\n      { if(contact.messages!==undefined){if(contact.messages.length!==0){\r\n      // console.log(\"contact.message:: \",contact.messages);\r\n        return contact.messages.map((message, index) => (\r\n          message.type === \"file\" ? (\r\n            <div\r\n              className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"}\r\n              key={index}\r\n            >\r\n              {/* <Image\r\n                fileName={message.fileName}\r\n                blob={new Blob([message.body],{type:\"png\"})}\r\n              /> */}\r\n              <Image src={message.locn} />\r\n            </div>\r\n          ) : (\r\n            <div\r\n              className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"}\r\n              key={index}\r\n            >\r\n              <Message\r\n                name={message.sender === props.myId ? \"You\" : message.sender}\r\n                text={message.content}\r\n              />\r\n            </div>\r\n          )\r\n      ))}}\r\n    }\r\n    );\r\n  \r\n\r\n\r\n  \r\n  \r\n\r\n  // const chatpane = User.myContacts\r\n  //   .filter((contact) => contact.id === User.currentUser.id)\r\n  //   .map((contact) =>\r\n  //     contact.messages.map((message, index) => (\r\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n  //       </div>\r\n  //     ))\r\n  //   );\r\n        \r\n  return (\r\n\r\n      <div className=\"chat-pane\">\r\n        <div className=\"chat-topbar\">\r\n          <img className=\"userIcon\"src={userIcon} alt=\"User\" />\r\n          <span className=\"Group-name\">{User.currentUser.contactName}</span>\r\n          <div className=\"topbar-buttons\" >\r\n            <div className='addmember' onClick={handleOnClick} style={User.currentUser.isGroupChat?{}:{display:'none'}}><img src={addMember} alt=\"AddMember\" /></div>\r\n            <img className=\"moreIcon\"src={moreIcon} alt=\"More\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"chats\">\r\n          {/* <Message name=\"User\"text=\"lorem njkdj kc kcejdwskdk j n kcxjnekjbjxj edj dbn xjd jdnb dn ndjnj djn kdx kjks jnsk hjsk jnsk js kshj nksnn.\"/> */}\r\n          <div >\r\n\r\n            \r\n              {/* {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null} */}\r\n              {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null}\r\n{\r\n\r\n              // User.Message.map((message,index)=>\r\n              // {\r\n              //   return(\r\n              //    <div className=\"mychat\" key={index}>\r\n              //     {/* {console.log(message.text)} */}\r\n              //      <Message name ={props.myId} text={message.text} />\r\n              //    </div> );\r\n              // }\r\n              // )\r\n}\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar\">\r\n          <Chatbox myId={props.myId} />\r\n        </div>\r\n      </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default Chatpane\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}