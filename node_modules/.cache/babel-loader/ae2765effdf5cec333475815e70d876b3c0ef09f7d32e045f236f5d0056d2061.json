{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\frontend\\\\src\\\\context\\\\users\\\\userState.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport userContext from \"./userContext\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserState = props => {\n  _s();\n  const [currentUser, setcurrentUser] = useState({\n    \"username\": \"User2\",\n    \"id\": '2'\n  });\n  const updateCurrentUser = (newUser, newId) => {\n    setcurrentUser({\n      username: newUser,\n      id: newId\n    });\n  };\n  const [Message, setMessage] = useState([]);\n  const updateMessage = newMessage => {\n    setMessage(prevMessage => [...prevMessage, {\n      text: newMessage\n    }]);\n  };\n  const [myContacts, setmyContacts] = useLocalStorage('ic', []);\n  useEffect(() => {\n    myContacts.forEach(contact => {\n      if (contact.id !== currentUser.id) return;\n      setMessage(prevMessage => [...prevMessage, ...contact.message]);\n    });\n    // console.log(myContacts);\n  }, [myContacts, currentUser.id]);\n\n  // const [myId,setmyId] = useLocalStorage('id');\n  // const updatemyId =(newId)=>{\n  //     setmyId(newId);\n  // }\n  const updatemyContacts = newContact => {\n    setmyContacts(prevContacts => [...prevContacts, {\n      name: newContact.name,\n      id: newContact.id,\n      message: []\n    }]);\n  };\n  const addMessageToContact = newMessage => {\n    console.log('hello');\n    setmyContacts(myContacts.map(contact => {\n      if (contact.id === newMessage.id[0]) {\n        return {\n          'name': contact.name,\n          'id': contact.id,\n          'message': [...contact.message, newMessage.text]\n        };\n      } else return contact;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(userContext.Provider, {\n    value: {\n      myContacts,\n      updatemyContacts,\n      currentUser,\n      updateCurrentUser,\n      Message,\n      updateMessage,\n      addMessageToContact\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(UserState, \"aRn5ATzPS25xdW6sMk4lkBn2COM=\", false, function () {\n  return [useLocalStorage];\n});\n_c = UserState;\nexport default UserState;\nvar _c;\n$RefreshReg$(_c, \"UserState\");","map":{"version":3,"names":["useEffect","useState","userContext","useLocalStorage","jsxDEV","_jsxDEV","UserState","props","_s","currentUser","setcurrentUser","updateCurrentUser","newUser","newId","username","id","Message","setMessage","updateMessage","newMessage","prevMessage","text","myContacts","setmyContacts","forEach","contact","message","updatemyContacts","newContact","prevContacts","name","addMessageToContact","console","log","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/frontend/src/context/users/userState.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport userContext from \"./userContext\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nconst UserState =(props)=>{\r\n    const [currentUser,setcurrentUser] = useState({\r\n        \"username\":\"User2\",\r\n        \"id\":'2'\r\n    })\r\n\r\n    const updateCurrentUser = (newUser, newId) => {\r\n        setcurrentUser({\r\n          username: newUser,\r\n          id: newId\r\n        });\r\n      };\r\n      \r\n    const [Message,setMessage] = useState([])\r\n    const updateMessage = (newMessage) => {\r\n        setMessage((prevMessage) => [\r\n          ...prevMessage,\r\n          {\r\n            text: newMessage,\r\n          },\r\n        ]);\r\n      };\r\n      const [myContacts,setmyContacts] =useLocalStorage('ic',[]);\r\n        useEffect(() => {\r\n          myContacts.forEach((contact) => {\r\n            if (contact.id !== currentUser.id) return;\r\n            setMessage((prevMessage) => [...prevMessage, ...contact.message]);\r\n          });\r\n          // console.log(myContacts);\r\n      }, [myContacts, currentUser.id]);\r\n      \r\n      // const [myId,setmyId] = useLocalStorage('id');\r\n      // const updatemyId =(newId)=>{\r\n        //     setmyId(newId);\r\n        // }\r\n        const updatemyContacts = (newContact) => {\r\n          setmyContacts((prevContacts) => [\r\n            ...prevContacts,\r\n            {\r\n              name: newContact.name,\r\n              id: newContact.id,\r\n              message: [],\r\n            },\r\n          ]);\r\n        };\r\n        \r\n        const addMessageToContact = (newMessage) => {\r\n          console.log('hello');\r\n          setmyContacts(\r\n          myContacts.map((contact) => {\r\n            if (contact.id === newMessage.id[0]) {\r\n              return {\r\n                'name': contact.name,\r\n                'id': contact.id,\r\n                'message': [...contact.message, newMessage.text],\r\n              };\r\n            }else\r\n            return contact;\r\n          })\r\n          );\r\n    };\r\n    \r\n    return(\r\n        <userContext.Provider value={{myContacts,updatemyContacts,currentUser,updateCurrentUser,Message,updateMessage,addMessageToContact}}>\r\n            {props.children}\r\n        </userContext.Provider>\r\n    )\r\n}\r\nexport default UserState ;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,SAAS,GAAGC,KAAK,IAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,WAAW,EAACC,cAAc,CAAC,GAAGT,QAAQ,CAAC;IAC1C,UAAU,EAAC,OAAO;IAClB,IAAI,EAAC;EACT,CAAC,CAAC;EAEF,MAAMU,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IAC1CH,cAAc,CAAC;MACbI,QAAQ,EAAEF,OAAO;MACjBG,EAAE,EAAEF;IACN,CAAC,CAAC;EACJ,CAAC;EAEH,MAAM,CAACG,OAAO,EAACC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACzC,MAAMiB,aAAa,GAAIC,UAAU,IAAK;IAClCF,UAAU,CAAEG,WAAW,IAAK,CAC1B,GAAGA,WAAW,EACd;MACEC,IAAI,EAAEF;IACR,CAAC,CACF,CAAC;EACJ,CAAC;EACD,MAAM,CAACG,UAAU,EAACC,aAAa,CAAC,GAAEpB,eAAe,CAAC,IAAI,EAAC,EAAE,CAAC;EACxDH,SAAS,CAAC,MAAM;IACdsB,UAAU,CAACE,OAAO,CAAEC,OAAO,IAAK;MAC9B,IAAIA,OAAO,CAACV,EAAE,KAAKN,WAAW,CAACM,EAAE,EAAE;MACnCE,UAAU,CAAEG,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAE,GAAGK,OAAO,CAACC,OAAO,CAAC,CAAC;IACnE,CAAC,CAAC;IACF;EACJ,CAAC,EAAE,CAACJ,UAAU,EAAEb,WAAW,CAACM,EAAE,CAAC,CAAC;;EAEhC;EACA;EACE;EACA;EACA,MAAMY,gBAAgB,GAAIC,UAAU,IAAK;IACvCL,aAAa,CAAEM,YAAY,IAAK,CAC9B,GAAGA,YAAY,EACf;MACEC,IAAI,EAAEF,UAAU,CAACE,IAAI;MACrBf,EAAE,EAAEa,UAAU,CAACb,EAAE;MACjBW,OAAO,EAAE;IACX,CAAC,CACF,CAAC;EACJ,CAAC;EAED,MAAMK,mBAAmB,GAAIZ,UAAU,IAAK;IAC1Ca,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBV,aAAa,CACbD,UAAU,CAACY,GAAG,CAAET,OAAO,IAAK;MAC1B,IAAIA,OAAO,CAACV,EAAE,KAAKI,UAAU,CAACJ,EAAE,CAAC,CAAC,CAAC,EAAE;QACnC,OAAO;UACL,MAAM,EAAEU,OAAO,CAACK,IAAI;UACpB,IAAI,EAAEL,OAAO,CAACV,EAAE;UAChB,SAAS,EAAE,CAAC,GAAGU,OAAO,CAACC,OAAO,EAAEP,UAAU,CAACE,IAAI;QACjD,CAAC;MACH,CAAC,MACD,OAAOI,OAAO;IAChB,CAAC,CACD,CAAC;EACP,CAAC;EAED,oBACIpB,OAAA,CAACH,WAAW,CAACiC,QAAQ;IAACC,KAAK,EAAE;MAACd,UAAU;MAACK,gBAAgB;MAAClB,WAAW;MAACE,iBAAiB;MAACK,OAAO;MAACE,aAAa;MAACa;IAAmB,CAAE;IAAAM,QAAA,EAC9H9B,KAAK,CAAC8B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;AAAAjC,EAAA,CAnEKF,SAAS;EAAA,QAsByBH,eAAe;AAAA;AAAAuC,EAAA,GAtBjDpC,SAAS;AAoEf,eAAeA,SAAS;AAAE,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}