{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\frontend\\\\src\\\\Components\\\\Chatpane.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Chatbox from './Chatbox';\nimport Message from './Message';\nimport userIcon from '../img/user.png';\nimport moreIcon from '../img/More-icon.png';\n// import { useState } from 'react';\nimport { useContext, useEffect } from 'react';\nimport userContext from '../context/users/userContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatpane = props => {\n  _s();\n  const User = useContext(userContext);\n  // // console.log(User.myContacts) ;\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n  // contact.message.map((message, index) => (\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\n  //     </div>\n  //   ))\n  // );\n\n  const [chatpane, setchatpane] = useState();\n\n  // Perform any necessary actions when User.currentUser changes\n  // For example, fetch new chat messages\n  if (User.currentUser) {\n    s = User.myContacts.filter(contact => contact.id === User.currentUser.id).map(contact => contact.messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.sender === props.myId ? \"outgoing-chats\" : \"mychats\",\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        name: message.sender === props.myId ? \"You\" : message.sender,\n        text: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)));\n  } else {\n    const chatpane = null;\n  }\n  if (!User.myContacts || !User.currentUser) {\n    return null; // Or return a loading indicator\n  }\n\n  // const chatpane = User.myContacts\n  //   .filter((contact) => contact.id === User.currentUser.id)\n  //   .map((contact) =>\n  //     contact.messages.map((message, index) => (\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\n  //       </div>\n  //     ))\n  //   );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-pane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"userIcon\",\n        src: userIcon,\n        alt: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Group-name\",\n        children: User.currentUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"moreIcon\",\n        src: moreIcon,\n        alt: \"More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: User.myContacts !== undefined && User.currentUser !== undefined && {\n          chatpane\n        } !== null ? chatpane : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-bar\",\n      children: /*#__PURE__*/_jsxDEV(Chatbox, {\n        myId: props.myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n};\n_s(Chatpane, \"6zmTLqIAa/GZpkHQ2ux2PvedeMg=\");\n_c = Chatpane;\nexport default Chatpane;\nvar _c;\n$RefreshReg$(_c, \"Chatpane\");","map":{"version":3,"names":["React","useState","Chatbox","Message","userIcon","moreIcon","useContext","useEffect","userContext","jsxDEV","_jsxDEV","Chatpane","props","_s","User","chatpane","setchatpane","currentUser","s","myContacts","filter","contact","id","map","messages","message","index","className","sender","myId","children","name","text","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","username","undefined","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/frontend/src/Components/Chatpane.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Chatbox from './Chatbox'\r\nimport Message from './Message'\r\nimport userIcon from '../img/user.png';\r\nimport moreIcon from '../img/More-icon.png'\r\n// import { useState } from 'react';\r\nimport { useContext ,useEffect} from 'react';\r\nimport userContext from '../context/users/userContext';\r\nconst Chatpane = (props) => {\r\n  const User =  useContext(userContext);\r\n  // // console.log(User.myContacts) ;\r\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n  // contact.message.map((message, index) => (\r\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\r\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\r\n  //     </div>\r\n  //   ))\r\n  // );\r\n\r\n  const [chatpane,setchatpane] =useState();\r\n\r\n    // Perform any necessary actions when User.currentUser changes\r\n    // For example, fetch new chat messages\r\n    if (User.currentUser) {\r\n      s = User.myContacts\r\n    .filter((contact) => contact.id === User.currentUser.id)\r\n    .map((contact) =>\r\n      contact.messages.map((message, index) => (\r\n        <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n          <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n        </div>\r\n      ))\r\n    );\r\n    }else{\r\n      const chatpane =null;\r\n    }\r\n\r\n\r\n  if (!User.myContacts || !User.currentUser) {\r\n    return null; // Or return a loading indicator\r\n  }\r\n  \r\n  \r\n\r\n  // const chatpane = User.myContacts\r\n  //   .filter((contact) => contact.id === User.currentUser.id)\r\n  //   .map((contact) =>\r\n  //     contact.messages.map((message, index) => (\r\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n  //       </div>\r\n  //     ))\r\n  //   );\r\n        \r\n  return (\r\n\r\n      <div className=\"chat-pane\">\r\n        <div className=\"chat-topbar\">\r\n          <img className=\"userIcon\"src={userIcon} alt=\"User\" />\r\n          <span className=\"Group-name\">{User.currentUser.username}</span>\r\n          <img className=\"moreIcon\"src={moreIcon} alt=\"More\" />\r\n        </div>\r\n        <div className=\"chats\">\r\n          {/* <Message name=\"User\"text=\"lorem njkdj kc kcejdwskdk j n kcxjnekjbjxj edj dbn xjd jdnb dn ndjnj djn kdx kjks jnsk hjsk jnsk js kshj nksnn.\"/> */}\r\n          <div >\r\n\r\n            \r\n              {User.myContacts!==undefined && User.currentUser!==undefined && {chatpane}!==null?chatpane:null}\r\n{\r\n\r\n              // User.Message.map((message,index)=>\r\n              // {\r\n              //   return(\r\n              //    <div className=\"mychat\" key={index}>\r\n              //     {/* {console.log(message.text)} */}\r\n              //      <Message name ={props.myId} text={message.text} />\r\n              //    </div> );\r\n              // }\r\n              // )\r\n}\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar\">\r\n          <Chatbox myId={props.myId} />\r\n        </div>\r\n      </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default Chatpane\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C;AACA,SAASC,UAAU,EAAEC,SAAS,QAAO,OAAO;AAC5C,OAAOC,WAAW,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvD,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1B,MAAMC,IAAI,GAAIR,UAAU,CAACE,WAAW,CAAC;EACrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACO,QAAQ,EAACC,WAAW,CAAC,GAAEf,QAAQ,CAAC,CAAC;;EAEtC;EACA;EACA,IAAIa,IAAI,CAACG,WAAW,EAAE;IACpBC,CAAC,GAAGJ,IAAI,CAACK,UAAU,CACpBC,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKR,IAAI,CAACG,WAAW,CAACK,EAAE,CAAC,CACvDC,GAAG,CAAEF,OAAO,IACXA,OAAO,CAACG,QAAQ,CAACD,GAAG,CAAC,CAACE,OAAO,EAAEC,KAAK,kBAClChB,OAAA;MAAKiB,SAAS,EAAEF,OAAO,CAACG,MAAM,KAAKhB,KAAK,CAACiB,IAAI,GAAG,gBAAgB,GAAG,SAAU;MAAAC,QAAA,eAC3EpB,OAAA,CAACP,OAAO;QAAC4B,IAAI,EAAEN,OAAO,CAACG,MAAM,KAAKhB,KAAK,CAACiB,IAAI,GAAG,KAAK,GAAGJ,OAAO,CAACG,MAAO;QAACI,IAAI,EAAEP,OAAO,CAACO;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADZV,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnF,CACN,CACH,CAAC;EACD,CAAC,MAAI;IACH,MAAMrB,QAAQ,GAAE,IAAI;EACtB;EAGF,IAAI,CAACD,IAAI,CAACK,UAAU,IAAI,CAACL,IAAI,CAACG,WAAW,EAAE;IACzC,OAAO,IAAI,CAAC,CAAC;EACf;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAEIP,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAG,QAAA,gBACxBpB,OAAA;MAAKiB,SAAS,EAAC,aAAa;MAAAG,QAAA,gBAC1BpB,OAAA;QAAKiB,SAAS,EAAC,UAAU;QAAAU,GAAG,EAAEjC,QAAS;QAACkC,GAAG,EAAC;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrD1B,OAAA;QAAMiB,SAAS,EAAC,YAAY;QAAAG,QAAA,EAAEhB,IAAI,CAACG,WAAW,CAACsB;MAAQ;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC/D1B,OAAA;QAAKiB,SAAS,EAAC,UAAU;QAAAU,GAAG,EAAEhC,QAAS;QAACiC,GAAG,EAAC;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACN1B,OAAA;MAAKiB,SAAS,EAAC,OAAO;MAAAG,QAAA,eAEpBpB,OAAA;QAAAoB,QAAA,EAGKhB,IAAI,CAACK,UAAU,KAAGqB,SAAS,IAAI1B,IAAI,CAACG,WAAW,KAAGuB,SAAS,IAAI;UAACzB;QAAQ,CAAC,KAAG,IAAI,GAACA,QAAQ,GAAC;MAAI;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAc9F;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN1B,OAAA;MAAKiB,SAAS,EAAC,YAAY;MAAAG,QAAA,eACzBpB,OAAA,CAACR,OAAO;QAAC2B,IAAI,EAAEjB,KAAK,CAACiB;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAGZ,CAAC;AAAAvB,EAAA,CAjFKF,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAmFd,eAAeA,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}