{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\real\\\\frontend\\\\src\\\\Components\\\\Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport sendIcon from '../img/send.png';\nimport { useContext, useEffect } from 'react';\n// import userContext from '../context/message/userContext';\nimport userContext from \"../context/users/userContext\";\nimport { useSocket } from '../context/SocketProvider';\nimport axios from 'axios';\nimport EmojiInput from 'react-input-emoji';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbox = props => {\n  _s();\n  // const message = useContext(currentMessageContext);\n  const User = useContext(userContext);\n  const socket = useSocket();\n  const [messageTyped, setmessageTyped] = useState(\"\");\n  const handleOnChange = event => {\n    setmessageTyped(event);\n  };\n  const [recipients, setrecipients] = useState([User.currentUser.recipients]);\n  useEffect(() => {\n    setrecipients([User.currentUser.recipients]);\n  }, [User.currentUser.id]);\n  // console.log(User.currentUser.id); // Log the updated value of recipients\n  const myId = props.myId;\n  useEffect(() => {\n    if (socket) {\n      socket.on('receive-message', async _ref => {\n        let {\n          recipients,\n          sender,\n          text,\n          contactName,\n          isGroupChat\n        } = _ref;\n        console.log(text, sender, recipients, contactName, isGroupChat);\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\"\n            }\n          };\n          console.log(\"isgroupchat::\", isGroupChat);\n          if (!isGroupChat) {\n            var response = await axios.get(`http://localhost:5000/api/user/contacts/getName?myId=${props.myId}&senderId=${sender}`);\n          }\n          const pws = await axios.put(\"http://localhost:5000/api/user/message/addMessage\", {\n            myId: props.myId,\n            contactName: `${isGroupChat ? contactName : response.data}`,\n            message: {\n              \"sender\": sender,\n              \"content\": text\n            }\n          }, config);\n          setmessageTyped(\"\");\n          console.log(\"helloworld\");\n          // props.setmyId(username);\n          //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\n        } catch (error) {\n          console.log(error.message);\n        }\n        // User.addMessageToContact({'text':text,id:[sender],'sender':sender});\n      });\n\n      return () => {\n        socket.off('receive-message');\n      };\n    }\n  }, [User, socket]);\n  const onSendingMessage = async event => {\n    event.preventDefault();\n    // await User.updateMessage(messageTyped);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      };\n      await socket.emit(\"send-message\", {\n        recipients,\n        text: messageTyped,\n        contactName: User.currentUser.contactName,\n        isGroupChat: User.currentUser.isGroupChat\n      });\n      // await User.addMessageToContact({text:messageTyped,id:recipients,'sender':props.myId});\n      await axios.put(\"http://localhost:5000/api/user/message/addMessage\", {\n        myId: props.myId,\n        contactName: User.currentUser.contactName,\n        message: {\n          \"sender\": myId,\n          \"content\": messageTyped\n        }\n      }, config);\n      setmessageTyped(\"\");\n      // console.log(response);\n      // props.setmyId(username);\n      //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\n    } catch (error) {\n      console.log(error.message);\n    }\n    console.log(\"see here chatbox::\", User.currentUser);\n\n    // console.log(\"Hello\"); // Log the updated value of recipients\n    // event.preventDefault();\n  };\n\n  // useEffect(() => {\n  //   if(User.Message.length>1){\n  //     console.log(User.Message);\n  //   }\n  // }, [User.Message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: selectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EmojiInput, {\n        value: messageTyped,\n        onChange: handleOnChange,\n        placeholder: \"Type here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-icon\",\n        onClick: onSendingMessage,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbox, \"37MMabhuZ1A1znjrHAvGyCYAOqQ=\", false, function () {\n  return [useSocket];\n});\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","sendIcon","useContext","useEffect","userContext","useSocket","axios","EmojiInput","jsxDEV","_jsxDEV","Chatbox","props","_s","User","socket","messageTyped","setmessageTyped","handleOnChange","event","recipients","setrecipients","currentUser","id","myId","on","_ref","sender","text","contactName","isGroupChat","console","log","config","headers","response","get","pws","put","data","message","error","off","onSendingMessage","preventDefault","emit","children","className","type","onChange","selectFile","fileName","_jsxFileName","lineNumber","columnNumber","value","placeholder","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/real/frontend/src/Components/Chatbox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport sendIcon from '../img/send.png';\r\nimport { useContext , useEffect} from 'react';\r\n// import userContext from '../context/message/userContext';\r\nimport userContext from \"../context/users/userContext\";\r\nimport { useSocket } from '../context/SocketProvider';\r\nimport axios from 'axios';\r\nimport  EmojiInput  from 'react-input-emoji';\r\n\r\nconst Chatbox = (props) => {\r\n  // const message = useContext(currentMessageContext);\r\n  const User=useContext(userContext);\r\n  const socket = useSocket();\r\n  const [messageTyped,setmessageTyped]=useState(\"\");\r\n  \r\n  const handleOnChange=(event)=>{\r\n    setmessageTyped(event);\r\n  }\r\n  const [recipients,setrecipients] =useState([User.currentUser.recipients]);\r\n  useEffect(()=>{\r\n    setrecipients([User.currentUser.recipients]);\r\n  },[User.currentUser.id])\r\n  // console.log(User.currentUser.id); // Log the updated value of recipients\r\n  const myId=props.myId;\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('receive-message', async({ recipients, sender, text ,contactName,isGroupChat}) => {\r\n        console.log(text,sender,recipients,contactName,isGroupChat);\r\n        try{\r\n          const config ={\r\n            headers: {\r\n              \"Content-type\":\"application/json\",\r\n            }\r\n          };\r\n          console.log(\"isgroupchat::\",isGroupChat)\r\n        \r\n          if(!isGroupChat){\r\n\r\n            var response =await axios.get(`http://localhost:5000/api/user/contacts/getName?myId=${props.myId}&senderId=${sender}`)\r\n          }\r\n            \r\n          \r\n        \r\n          const pws=await axios.put(\"http://localhost:5000/api/user/message/addMessage\",{myId:props.myId,contactName:`${isGroupChat?contactName:response.data}`,message:{\"sender\":sender,\"content\":text}},config)\r\n          setmessageTyped(\"\");\r\n          console.log(\"helloworld\");\r\n          // props.setmyId(username);\r\n          //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n        }catch(error){\r\n          console.log(error.message);\r\n        }\r\n        // User.addMessageToContact({'text':text,id:[sender],'sender':sender});\r\n      });\r\n      \r\n      return () => {\r\n        socket.off('receive-message');\r\n      };\r\n    }\r\n  }, [User,socket]);\r\n  const onSendingMessage = async (event) => {\r\n    event.preventDefault();\r\n    // await User.updateMessage(messageTyped);\r\n    try{\r\n      const config ={\r\n        headers: {\r\n          \"Content-type\":\"application/json\",\r\n        }\r\n      };\r\n      await socket.emit(\"send-message\", { recipients, text: messageTyped,contactName:User.currentUser.contactName,isGroupChat:User.currentUser.isGroupChat});\r\n      // await User.addMessageToContact({text:messageTyped,id:recipients,'sender':props.myId});\r\n      await axios.put(\"http://localhost:5000/api/user/message/addMessage\",{myId:props.myId,contactName:User.currentUser.contactName,message:{\"sender\":myId,\"content\":messageTyped}},config)\r\n      setmessageTyped(\"\");\r\n      // console.log(response);\r\n      // props.setmyId(username);\r\n      //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n    }catch(error){\r\n      console.log(error.message);\r\n    }\r\n    console.log(\"see here chatbox::\",User.currentUser)\r\n    \r\n    // console.log(\"Hello\"); // Log the updated value of recipients\r\n    // event.preventDefault();\r\n  \r\n  };\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if(User.Message.length>1){\r\n  //     console.log(User.Message);\r\n  //   }\r\n  // }, [User.Message]);\r\n  return (\r\n    <div>\r\n      \r\n        <form className=\"chatbox\" >\r\n          {/* <input type=\"text\" placeholder='Type here' value={messageTyped} onChange={handleOnChange}/> */}\r\n          <input type=\"file\" onChange={selectFile} />\r\n          <EmojiInput\r\n          value={messageTyped}\r\n          onChange={handleOnChange}\r\n          placeholder=\"Type here\"\r\n        />\r\n          <button type='submit' className=\"send-icon\" onClick={onSendingMessage}>\r\n            <img src={sendIcon} alt=\"Send\" />\r\n          </button>\r\n        </form>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}