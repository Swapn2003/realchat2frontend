{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\real\\\\frontend\\\\src\\\\Components\\\\Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport sendIcon from '../img/send.png';\nimport { useContext, useEffect } from 'react';\n// import userContext from '../context/message/userContext';\nimport userContext from \"../context/users/userContext\";\nimport { useSocket } from '../context/SocketProvider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbox = props => {\n  _s();\n  // const message = useContext(currentMessageContext);\n  const User = useContext(userContext);\n  const socket = useSocket();\n  const [messageTyped, setmessageTyped] = useState(\"\");\n  const handleOnChange = event => {\n    setmessageTyped(event.target.value);\n  };\n  const [recipients, setrecipients] = useState([User.currentUser.recipients]);\n  useEffect(() => {\n    setrecipients([User.currentUser.recipients]);\n  }, [User.currentUser.id]);\n  // console.log(User.currentUser.id); // Log the updated value of recipients\n  const myId = props.myId;\n  useEffect(() => {\n    if (socket) {\n      socket.on('receive-message', async _ref => {\n        let {\n          recipients,\n          sender,\n          text,\n          contactName,\n          isGroupChat\n        } = _ref;\n        console.log(text, sender, recipients);\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\"\n            }\n          };\n          if (!isGroupChat) {\n            const response = await axios.get(`http://localhost:5000/api/user/contacts/getName?myId=${props.myId}&senderId=${sender}`);\n            const name = response.data;\n          } else {\n            const name = contactName;\n          }\n          const pws = await axios.put(\"http://localhost:5000/api/user/message/addMessage\", {\n            myId: props.myId,\n            contactName: name,\n            message: {\n              \"sender\": sender,\n              \"content\": text\n            }\n          }, config);\n          setmessageTyped(\"\");\n          console.log(\"helloworld\");\n          // props.setmyId(username);\n          //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\n        } catch (error) {\n          console.log(error.message);\n        }\n        // User.addMessageToContact({'text':text,id:[sender],'sender':sender});\n      });\n\n      return () => {\n        socket.off('receive-message');\n      };\n    }\n  }, [User, socket]);\n  const onSendingMessage = async event => {\n    event.preventDefault();\n    // await User.updateMessage(messageTyped);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      };\n      await socket.emit(\"send-message\", {\n        recipients,\n        text: messageTyped,\n        contactName: User.currentUser.contactName\n      });\n      // await User.addMessageToContact({text:messageTyped,id:recipients,'sender':props.myId});\n      await axios.put(\"http://localhost:5000/api/user/message/addMessage\", {\n        myId: props.myId,\n        contactName: User.currentUser.contactName,\n        isGroupChat: User.currentUser.isGroupChat,\n        message: {\n          \"sender\": myId,\n          \"content\": messageTyped\n        }\n      }, config);\n      setmessageTyped(\"\");\n      // console.log(response);\n      // props.setmyId(username);\n      //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\n    } catch (error) {\n      console.log(error.message);\n    }\n    console.log(\"see here chatbox::\", User.currentUser);\n\n    // console.log(\"Hello\"); // Log the updated value of recipients\n    // event.preventDefault();\n  };\n\n  // useEffect(() => {\n  //   if(User.Message.length>1){\n  //     console.log(User.Message);\n  //   }\n  // }, [User.Message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type here\",\n        value: messageTyped,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-icon\",\n        onClick: onSendingMessage,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbox, \"37MMabhuZ1A1znjrHAvGyCYAOqQ=\", false, function () {\n  return [useSocket];\n});\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","sendIcon","useContext","useEffect","userContext","useSocket","axios","jsxDEV","_jsxDEV","Chatbox","props","_s","User","socket","messageTyped","setmessageTyped","handleOnChange","event","target","value","recipients","setrecipients","currentUser","id","myId","on","_ref","sender","text","contactName","isGroupChat","console","log","config","headers","response","get","name","data","pws","put","message","error","off","onSendingMessage","preventDefault","emit","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/real/frontend/src/Components/Chatbox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport sendIcon from '../img/send.png';\r\nimport { useContext , useEffect} from 'react';\r\n// import userContext from '../context/message/userContext';\r\nimport userContext from \"../context/users/userContext\";\r\nimport { useSocket } from '../context/SocketProvider';\r\nimport axios from 'axios';\r\nconst Chatbox = (props) => {\r\n  // const message = useContext(currentMessageContext);\r\n  const User=useContext(userContext);\r\n  const socket = useSocket();\r\n  const [messageTyped,setmessageTyped]=useState(\"\");\r\n  \r\n  const handleOnChange=(event)=>{\r\n    setmessageTyped(event.target.value);\r\n  }\r\n  const [recipients,setrecipients] =useState([User.currentUser.recipients]);\r\n  useEffect(()=>{\r\n    setrecipients([User.currentUser.recipients]);\r\n  },[User.currentUser.id])\r\n  // console.log(User.currentUser.id); // Log the updated value of recipients\r\n  const myId=props.myId;\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('receive-message', async({ recipients, sender, text ,contactName,isGroupChat}) => {\r\n        console.log(text,sender,recipients);\r\n        try{\r\n          const config ={\r\n            headers: {\r\n              \"Content-type\":\"application/json\",\r\n            }\r\n          };\r\n          \r\n          if(!isGroupChat){\r\n\r\n            const response =await axios.get(`http://localhost:5000/api/user/contacts/getName?myId=${props.myId}&senderId=${sender}`)\r\n            const name =  response.data;\r\n          }else{\r\n            const name = contactName;\r\n          }\r\n        \r\n          const pws=await axios.put(\"http://localhost:5000/api/user/message/addMessage\",{myId:props.myId,contactName:name,message:{\"sender\":sender,\"content\":text}},config)\r\n          setmessageTyped(\"\");\r\n          console.log(\"helloworld\");\r\n          // props.setmyId(username);\r\n          //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n        }catch(error){\r\n          console.log(error.message);\r\n        }\r\n        // User.addMessageToContact({'text':text,id:[sender],'sender':sender});\r\n      });\r\n      \r\n      return () => {\r\n        socket.off('receive-message');\r\n      };\r\n    }\r\n  }, [User,socket]);\r\n  const onSendingMessage = async (event) => {\r\n    event.preventDefault();\r\n    // await User.updateMessage(messageTyped);\r\n    try{\r\n      const config ={\r\n        headers: {\r\n          \"Content-type\":\"application/json\",\r\n        }\r\n      };\r\n      await socket.emit(\"send-message\", { recipients, text: messageTyped,contactName:User.currentUser.contactName});\r\n      // await User.addMessageToContact({text:messageTyped,id:recipients,'sender':props.myId});\r\n      await axios.put(\"http://localhost:5000/api/user/message/addMessage\",{myId:props.myId,contactName:User.currentUser.contactName,isGroupChat:User.currentUser.isGroupChat,message:{\"sender\":myId,\"content\":messageTyped}},config)\r\n      setmessageTyped(\"\");\r\n      // console.log(response);\r\n      // props.setmyId(username);\r\n      //   localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n    }catch(error){\r\n      console.log(error.message);\r\n    }\r\n    console.log(\"see here chatbox::\",User.currentUser)\r\n    \r\n    // console.log(\"Hello\"); // Log the updated value of recipients\r\n    // event.preventDefault();\r\n  \r\n  };\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if(User.Message.length>1){\r\n  //     console.log(User.Message);\r\n  //   }\r\n  // }, [User.Message]);\r\n  return (\r\n    <div>\r\n      \r\n        <form className=\"chatbox\" >\r\n          <input type=\"text\" placeholder='Type here' value={messageTyped} onChange={handleOnChange}/>\r\n          <button type='submit' className=\"send-icon\" onClick={onSendingMessage}>\r\n            <img src={sendIcon} alt=\"Send\" />\r\n          </button>\r\n        </form>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}