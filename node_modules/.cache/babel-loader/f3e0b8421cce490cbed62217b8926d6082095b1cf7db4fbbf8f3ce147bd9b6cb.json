{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT Guwahati\\\\cpp\\\\New folder\\\\helloworld\\\\WEB_D\\\\Real_time_chat\\\\real\\\\frontend\\\\src\\\\Components\\\\Chatpane.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Chatbox from './Chatbox';\nimport Message from './Message';\nimport userIcon from '../img/user.png';\nimport moreIcon from '../img/More-icon.png';\n// import { useState } from 'react';\nimport { useContext, useEffect } from 'react';\nimport userContext from '../context/users/userContext';\nimport axios from 'axios';\nimport addMember from \"../img/addMember.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatpane = props => {\n  _s();\n  const User = useContext(userContext);\n  // // console.log(User.myContacts) ;\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n  // contact.message.map((message, index) => (\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\n  //     </div>\n  //   ))\n  // );\n\n  // const [chatpane,setchatpane] =useState();\n\n  // Perform any necessary actions when User.currentUser changes\n  // For example, fetch new chat messages\n  // if(!User.currentUser){\n  //   return null;\n  // }\n  // const chatpane=null;\n  // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\n  // {console.log(contact.message);\n\n  // });\n\n  const handleOnClick = async () => {\n    const newMemberUsername = window.prompt('New Member username?');\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      };\n      axios.put(`http://localhost:5000/api/user/contacts/addMember`, {\n        myId: props.myId,\n        recipient: newMemberUsername,\n        contactName: User.currentUser.contactName\n      }, config);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n  if (!User.myContacts || !User.currentUser) {\n    return null; // Or return a loading indicator\n  }\n\n  const chatpane = User.myContacts.filter(contact => contact.contactName === User.currentUser.contactName).map(contact => {\n    if (contact.messages !== undefined) {\n      if (contact.messages.length !== 0) {\n        // console.log(\"contact.message:: \",contact.messages);\n        return contact.messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.sender === props.myId ? \"outgoing-chats\" : \"mychats\",\n          children: /*#__PURE__*/_jsxDEV(Message, {\n            name: message.sender === props.myId ? \"You\" : message.sender,\n            text: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this));\n      }\n    }\n  });\n\n  // const chatpane = User.myContacts\n  //   .filter((contact) => contact.id === User.currentUser.id)\n  //   .map((contact) =>\n  //     contact.messages.map((message, index) => (\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\n  //       </div>\n  //     ))\n  //   );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-pane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"userIcon\",\n        src: userIcon,\n        alt: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Group-name\",\n        children: User.currentUser.contactName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topbar-buttons\",\n        onClick: handleOnClick,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addmember\",\n          style: User.currentUser.isGroupChat ? {} : {\n            display: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"image\", {\n            src: addMember,\n            alt: \"Add Member\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 100\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"moreIcon\",\n          src: moreIcon,\n          alt: \"More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: User.myContacts !== undefined && User.currentUser !== undefined ? chatpane : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-bar\",\n      children: /*#__PURE__*/_jsxDEV(Chatbox, {\n        myId: props.myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n_s(Chatpane, \"68pAIBoCybEghYpKDyNa7NSmRmA=\");\n_c = Chatpane;\nexport default Chatpane;\nvar _c;\n$RefreshReg$(_c, \"Chatpane\");","map":{"version":3,"names":["React","useState","Chatbox","Message","userIcon","moreIcon","useContext","useEffect","userContext","axios","addMember","jsxDEV","_jsxDEV","Chatpane","props","_s","User","handleOnClick","newMemberUsername","window","prompt","config","headers","put","myId","recipient","contactName","currentUser","error","console","log","message","myContacts","chatpane","filter","contact","map","messages","undefined","length","index","className","sender","children","name","text","content","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","style","isGroupChat","display","_c","$RefreshReg$"],"sources":["D:/IIT Guwahati/cpp/New folder/helloworld/WEB_D/Real_time_chat/real/frontend/src/Components/Chatpane.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Chatbox from './Chatbox'\r\nimport Message from './Message'\r\nimport userIcon from '../img/user.png';\r\nimport moreIcon from '../img/More-icon.png'\r\n// import { useState } from 'react';\r\nimport { useContext ,useEffect} from 'react';\r\nimport userContext from '../context/users/userContext';\r\nimport axios from 'axios';\r\nimport addMember from \"../img/addMember.png\";\r\nconst Chatpane = (props) => {\r\n  const User =  useContext(userContext);\r\n  // // console.log(User.myContacts) ;\r\n  // const chatpane = User.myContacts && User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n  // contact.message.map((message, index) => (\r\n  //   <div className={message.sender===props.myId?\"outgoing-chats\":\"mychats\"} key={index}>\r\n  //       <Message name={message.sender===props.myId?\"You\":message.sender} text={message.text} />\r\n  //     </div>\r\n  //   ))\r\n  // );\r\n\r\n  // const [chatpane,setchatpane] =useState();\r\n\r\n    // Perform any necessary actions when User.currentUser changes\r\n    // For example, fetch new chat messages\r\n      // if(!User.currentUser){\r\n      //   return null;\r\n      // }\r\n      // const chatpane=null;\r\n      // User.myContacts.filter((contact) => contact.id === User.currentUser.id).map((contact) =>\r\n      // {console.log(contact.message);\r\n        \r\n        \r\n      // });\r\n\r\n      const handleOnClick=async()=>{\r\n       const newMemberUsername = window.prompt('New Member username?');\r\n\r\n       try{\r\n        const config ={\r\n          headers: {\r\n            \"Content-type\":\"application/json\",\r\n          }\r\n        };\r\n        axios.put(`http://localhost:5000/api/user/contacts/addMember`,{myId:props.myId,recipient:newMemberUsername,contactName:User.currentUser.contactName},config)\r\n      }catch(error){\r\n        console.log(error.message);\r\n      }\r\n      }\r\n\r\n\r\n      if (!User.myContacts || !User.currentUser) {\r\n        return null; // Or return a loading indicator\r\n      }\r\n      const chatpane=User.myContacts.filter((contact) => contact.contactName === User.currentUser.contactName).map((contact) =>\r\n      { if(contact.messages!==undefined){if(contact.messages.length!==0){\r\n      // console.log(\"contact.message:: \",contact.messages);\r\n        return contact.messages.map((message, index) => (\r\n        <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n          <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.content} />\r\n        </div>\r\n      ))}}\r\n    }\r\n    );\r\n  \r\n\r\n\r\n  \r\n  \r\n\r\n  // const chatpane = User.myContacts\r\n  //   .filter((contact) => contact.id === User.currentUser.id)\r\n  //   .map((contact) =>\r\n  //     contact.messages.map((message, index) => (\r\n  //       <div className={message.sender === props.myId ? \"outgoing-chats\" : \"mychats\"} key={index}>\r\n  //         <Message name={message.sender === props.myId ? \"You\" : message.sender} text={message.text} />\r\n  //       </div>\r\n  //     ))\r\n  //   );\r\n        \r\n  return (\r\n\r\n      <div className=\"chat-pane\">\r\n        <div className=\"chat-topbar\">\r\n          <img className=\"userIcon\"src={userIcon} alt=\"User\" />\r\n          <span className=\"Group-name\">{User.currentUser.contactName}</span>\r\n          <div className=\"topbar-buttons\" onClick={handleOnClick}>\r\n            <button className='addmember' style={User.currentUser.isGroupChat?{}:{display:'none'}}><image src={addMember} alt=\"Add Member\" /></button>\r\n            <img className=\"moreIcon\"src={moreIcon} alt=\"More\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"chats\">\r\n          {/* <Message name=\"User\"text=\"lorem njkdj kc kcejdwskdk j n kcxjnekjbjxj edj dbn xjd jdnb dn ndjnj djn kdx kjks jnsk hjsk jnsk js kshj nksnn.\"/> */}\r\n          <div >\r\n\r\n            \r\n              {/* {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null} */}\r\n              {User.myContacts!==undefined && User.currentUser!==undefined ?chatpane:null}\r\n{\r\n\r\n              // User.Message.map((message,index)=>\r\n              // {\r\n              //   return(\r\n              //    <div className=\"mychat\" key={index}>\r\n              //     {/* {console.log(message.text)} */}\r\n              //      <Message name ={props.myId} text={message.text} />\r\n              //    </div> );\r\n              // }\r\n              // )\r\n}\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar\">\r\n          <Chatbox myId={props.myId} />\r\n        </div>\r\n      </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default Chatpane\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}